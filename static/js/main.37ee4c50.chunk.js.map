{"version":3,"sources":["serviceWorker.js","store/modules/apod.js","lib/api.js","store/modules/index.js","store/index.js","store/configure.js","components/ViewTemplate/ViewTemplate.js","components/Viewer/Viewer.js","containers/ViewerContainer.js","components/SpaceNavigator/SpaceNavigator.js","containers/SpaceNavigatorContainer.js","components/App.js","Root.js","index.js","components/ViewTemplate/ViewTemplate.module.scss","components/SpaceNavigator/SpaceNavigator.module.scss","components/Viewer/Viewer.module.scss"],"names":["Boolean","window","location","hostname","match","previous","createAction","next","getApod","date","arguments","length","undefined","axios","get","concat","initialState","Map","maxDate","url","mediaType","handleActions","Object","objectSpread","_objectSpread2","defineProperty","state","update","moment","subtract","format","add","pender","type","onSuccess","action","_action$payload$data","payload","data","media_type","temp","set","combineReducers","apod","configure","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middlewares","penderMiddleware","createStore","modules","applyMiddleware","apply","ViewTemplate","_ref","viewer","spaceNavigator","react_default","a","createElement","className","styles","viewer_template","viewer_wrapper","space_navigator_wrapper","Viewer","loading","dist","color","size","onClick","open","src","alt","title","frameBorder","allow","allowFullScreen","ViewerContainer","req","_callee","_this$props","ApodActions","regenerator_default","wrap","_context","prev","_this","props","cancel","t0","console","log","stop","this","prevProps","prevState","_this$props2","components_Viewer_Viewer","Component","connect","pending","dispatch","bindActionCreators","apodActions","cx","classNames","bind","SpaceNavigator","onPrev","onNext","endDate","left","end","join","md","SpaceNavigatorContainer","handlePrev","handleNext","components_SpaceNavigator_SpaceNavigator","App","components_ViewTemplate_ViewTemplate","containers_ViewerContainer","containers_SpaceNavigatorContainer","Root","es","store","components_App","ReactDOM","render","src_Root","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","space_navigator","right","circle"],"mappings":"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","file":"static/js/main.37ee4c50.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createAction, handleActions } from 'redux-actions';\nimport { Map } from 'immutable';\nimport { pender } from 'redux-pender';\nimport * as api from 'lib/api';\nimport moment from 'moment';\n\n// Action Type\nconst PREVIOUS = 'apod/PREVIOUS';\nconst NEXT = 'apod/NEXT';\nconst GET_APOD = 'apod/GET_APOD';\n\n// Action Creaters\nexport const previous = createAction(PREVIOUS);\nexport const next = createAction(NEXT);\nexport const getApod = createAction(GET_APOD, api.getAPOD); // date\n\n// Initial State\nconst initialState = Map({\n  maxDate: null,\n  date: null,\n  url: null,\n  mediaType: null\n});\n\n// Reducer\nexport default handleActions(\n  {\n    // 이전 날짜\n    [PREVIOUS]: state =>\n      state.update('date', date =>\n        moment(date)\n          .subtract(1, 'days')\n          .format('YYYY-MM-DD')\n      ),\n    // 다음 날짜\n    [NEXT]: state =>\n      state.update('date', date =>\n        moment(date)\n          .add(1, 'days')\n          .format('YYYY-MM-DD')\n      ),\n    // 내용 가져오기\n    ...pender({\n      type: GET_APOD,\n      onSuccess: (state, action) => {\n        const { date, url, media_type: mediaType } = action.payload.data;\n        // 현재 상태에 maxDate가 설정되어 있지 않다면 설정하기 위해 temnp 상태 생성\n        let temp = state;\n        if (!temp.get('date')) {\n          temp = temp.set('date', date).set('maxDate', date);\n        }\n        return temp.set('mediaType', mediaType).set('url', url);\n      }\n    })\n  },\n  initialState\n);\n","import axios from 'axios';\n\nexport const getAPOD = (date = '') =>\n  axios.get(\n    `https://api.nasa.gov/planetary/apod?api_key=IIwRp1MU4U9Y8TruzTTSlRMDHYrvaK5pAgYa7hTm&date=${date}`\n  );\n","import { combineReducers } from 'redux';\nimport apod from './apod';\nimport { penderReducer as pender } from 'redux-pender';\n\n// 루트 리듀서\nexport default combineReducers({\n  apod,\n  pender\n});\n","import configure from './configure';\nexport default configure();\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport penderMiddleware from 'redux-pender';\nimport modules from './modules';\n\nconst configure = () => {\n  const devTools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n  const composeEnhancers = devTools || compose;\n\n  const middlewares = [penderMiddleware()];\n\n  const store = createStore(\n    modules,\n    composeEnhancers(applyMiddleware(...middlewares))\n  );\n\n  return store;\n};\n\nexport default configure;\n","import React from 'react';\nimport styles from './ViewTemplate.module.scss';\n\nconst ViewTemplate = ({ viewer, spaceNavigator }) => {\n  return (\n    <div className={styles.viewer_template}>\n      <header>Astronomy Picture of the Day</header>\n      <div className={styles.viewer_wrapper}>\n        {viewer}\n        <div className={styles.space_navigator_wrapper}>{spaceNavigator}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default ViewTemplate;\n","import React from 'react';\nimport styles from './Viewer.module.scss';\nimport { FadingCircle } from 'better-react-spinkit';\n\n/**\n * 뷰어 컴포넌트\n * @param {string} param0 type: video, image\n * @param {string} url url\n * @param {boolean} loading loading\n */\nconst Viewer = ({ mediaType, url, loading }) => {\n  if (loading) {\n    // 로딩중일때 로더 보여주기\n    return (\n      <div className={styles.viewer}>\n        <FadingCircle color=\"white\" size={60} />\n      </div>\n    );\n  }\n\n  if (!url) return null;\n\n  return (\n    <div className={styles.viewer}>\n      {mediaType === 'image' ? (\n        <img onClick={() => window.open(url)} src={url} alt=\"space\" />\n      ) : (\n        <iframe\n          title=\"space-video\"\n          src={url}\n          frameBorder=\"0\"\n          allow=\"encrypted-media\"\n          allowFullScreen\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Viewer;\n","import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as apodActions from 'store/modules/apod';\nimport Viewer from 'components/Viewer';\n\nclass ViewerContainer extends Component {\n  req = null;\n\n  getApod = async () => {\n    const { ApodActions, loading, date } = this.props;\n    loading && this.req.cancel(); // 로딩중이라면 기존의 요청 취소 (redux-pender)\n\n    try {\n      // this.req에 Promise 담기\n      this.req = ApodActions.getApod(date || '');\n      await this.req;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  componentDidMount() {\n    this.getApod();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // date가 변경되면 요청\n    if (this.props.date !== prevProps.date) {\n      this.getApod();\n    }\n  }\n\n  render() {\n    const { date, url, mediaType, loading } = this.props;\n\n    return (\n      <Viewer date={date} url={url} mediaType={mediaType} loading={loading} />\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    date: state.apod.get('date'),\n    url: state.apod.get('url'),\n    mediaType: state.apod.get('mediaType'),\n    loading: state.pender.pending['apod/GET_APOD']\n  }),\n  dispatch => ({\n    ApodActions: bindActionCreators(apodActions, dispatch)\n  })\n)(ViewerContainer);\n","import React from 'react';\nimport {\n  MdChevronLeft as LeftIcon,\n  MdChevronRight as RightIcon\n} from 'react-icons/md';\nimport styles from './SpaceNavigator.module.scss';\nimport classNames from 'classnames/bind';\n\nconst cx = classNames.bind(styles);\n\n/**\n * 네비게이터 컴포넌트\n * @param {function} onPrev 뒤로 가기\n * @param {function} onNext 앞으로 가기\n * @param {boolean} endDate 마지막 날 체크\n */\nconst SpaceNavigator = ({ onPrev, onNext, endDate }) => {\n  return (\n    <div className={cx('space_navigator')}>\n      <div className={[styles.left, styles.end].join(' ')}>\n        <div className={cx('circle')} onClick={onPrev}>\n          <LeftIcon />\n        </div>\n      </div>\n\n      {// 마지막 날일 경우 표시 안함\n        !endDate ? (\n          <div className={cx('right', 'end')}>\n            <div className={cx('circle')} onClick={onNext}>\n              <RightIcon />\n            </div>\n          </div>\n        ) : null}\n    </div>\n  );\n};\n\nexport default SpaceNavigator;\n","import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport SpaceNavigator from 'components/SpaceNavigator';\nimport * as apodActions from 'store/modules/apod';\n\nclass SpaceNavigatorContainer extends Component {\n  handlePrev = () => {\n    const { ApodActions } = this.props;\n    ApodActions.previous();\n  };\n\n  handleNext = () => {\n    const { ApodActions, date, maxDate } = this.props;\n    if (date === maxDate) return; // 오늘이면 작동 중지\n    ApodActions.next();\n  };\n\n  render() {\n    const { handlePrev, handleNext } = this;\n    const { date, maxDate } = this.props;\n    return (\n      <SpaceNavigator\n        onPrev={handlePrev}\n        onNext={handleNext}\n        endDate={date === maxDate}\n      />\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    date: state.apod.get('date'),\n    maxDate: state.apod.get('maxDate')\n  }),\n  dispatch => ({\n    ApodActions: bindActionCreators(apodActions, dispatch)\n  })\n)(SpaceNavigatorContainer);\n","import React, { Component } from 'react';\nimport ViewTemplate from './ViewTemplate';\n\nimport ViewerContainer from 'containers/ViewerContainer';\nimport SpaceNavigatorContainer from 'containers/SpaceNavigatorContainer';\n\nclass App extends Component {\n  render() {\n    return (\n      <ViewTemplate\n        viewer={<ViewerContainer />}\n        spaceNavigator={<SpaceNavigatorContainer />}\n      />\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from 'components/App';\n\nconst Root = () => {\n  return (\n    <Provider store={store}>\n      <App />\n    </Provider>\n  );\n};\n\nexport default Root;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Root from 'Root';\nimport './styles/base.scss';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"viewer_template\":\"ViewTemplate_viewer_template__2y4kU\",\"viewer_wrapper\":\"ViewTemplate_viewer_wrapper__3GQD6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"space_navigator\":\"SpaceNavigator_space_navigator__14En_\",\"end\":\"SpaceNavigator_end__bRLFh\",\"left\":\"SpaceNavigator_left__2k2r4\",\"right\":\"SpaceNavigator_right__38Fgj\",\"circle\":\"SpaceNavigator_circle__2PsOT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"viewer\":\"Viewer_viewer__JrZYt\"};"],"sourceRoot":""}